{"ast":null,"code":"var _jsxFileName = \"/Users/tiffanifox/Desktop/dkp/pages/events.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/MyLayout';\nexport default function Events() {\n  var CLIENT_ID = '<YOUR_CLIENT_ID>';\n  var API_KEY = '<YOUR_API_KEY>'; // Array of API discovery doc URLs for APIs used by the quickstart\n\n  var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"]; // Authorization scopes required by the API; multiple scopes can be\n  // included, separated by spaces.\n\n  var SCOPES = \"https://www.googleapis.com/auth/calendar.readonly\";\n  var authorizeButton = document.getElementById('authorize_button');\n  var signoutButton = document.getElementById('signout_button');\n  /**\n   *  On load, called to load the auth2 library and API client library.\n   */\n\n  function handleClientLoad() {\n    gapi.load('client:auth2', initClient);\n  }\n  /**\n   *  Initializes the API client library and sets up sign-in state\n   *  listeners.\n   */\n\n\n  function initClient() {\n    gapi.client.init({\n      apiKey: API_KEY,\n      clientId: CLIENT_ID,\n      discoveryDocs: DISCOVERY_DOCS,\n      scope: SCOPES\n    }).then(function () {\n      // Listen for sign-in state changes.\n      gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus); // Handle the initial sign-in state.\n\n      updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n      authorizeButton.onclick = handleAuthClick;\n      signoutButton.onclick = handleSignoutClick;\n    }, function (error) {\n      appendPre(JSON.stringify(error, null, 2));\n    });\n  }\n  /**\n   *  Called when the signed in status changes, to update the UI\n   *  appropriately. After a sign-in, the API is called.\n   */\n\n\n  function updateSigninStatus(isSignedIn) {\n    if (isSignedIn) {\n      authorizeButton.style.display = 'none';\n      signoutButton.style.display = 'block';\n      listUpcomingEvents();\n    } else {\n      authorizeButton.style.display = 'block';\n      signoutButton.style.display = 'none';\n    }\n  }\n  /**\n   *  Sign in the user upon button click.\n   */\n\n\n  function handleAuthClick(event) {\n    gapi.auth2.getAuthInstance().signIn();\n  }\n  /**\n   *  Sign out the user upon button click.\n   */\n\n\n  function handleSignoutClick(event) {\n    gapi.auth2.getAuthInstance().signOut();\n  }\n  /**\n   * Append a pre element to the body containing the given message\n   * as its text node. Used to display the results of the API call.\n   *\n   * @param {string} message Text to be placed in pre element.\n   */\n\n\n  function appendPre(message) {\n    var pre = document.getElementById('content');\n    var textContent = document.createTextNode(message + '\\n');\n    pre.appendChild(textContent);\n  }\n  /**\n   * Print the summary and start datetime/date of the next ten events in\n   * the authorized user's calendar. If no events are found an\n   * appropriate message is printed.\n   */\n\n\n  function listUpcomingEvents() {\n    gapi.client.calendar.events.list({\n      'calendarId': 'primary',\n      'timeMin': new Date().toISOString(),\n      'showDeleted': false,\n      'singleEvents': true,\n      'maxResults': 10,\n      'orderBy': 'startTime'\n    }).then(function (response) {\n      var events = response.result.items;\n      appendPre('Upcoming events:');\n\n      if (events.length > 0) {\n        for (i = 0; i < events.length; i++) {\n          var event = events[i];\n          var when = event.start.dateTime;\n\n          if (!when) {\n            when = event.start.date;\n          }\n\n          appendPre(event.summary + ' (' + when + ')');\n        }\n      } else {\n        appendPre('No upcoming events found.');\n      }\n    });\n  }\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"));\n}","map":{"version":3,"sources":["/Users/tiffanifox/Desktop/dkp/pages/events.js"],"names":["Layout","Events","CLIENT_ID","API_KEY","DISCOVERY_DOCS","SCOPES","authorizeButton","document","getElementById","signoutButton","handleClientLoad","gapi","load","initClient","client","init","apiKey","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","get","onclick","handleAuthClick","handleSignoutClick","error","appendPre","JSON","stringify","style","display","listUpcomingEvents","event","signIn","signOut","message","pre","textContent","createTextNode","appendChild","calendar","events","list","Date","toISOString","response","result","items","length","i","when","start","dateTime","date","summary"],"mappings":"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","sourcesContent":["import Layout from '../components/MyLayout';\n\nexport default function Events() {\n  var CLIENT_ID = '<YOUR_CLIENT_ID>';\n  var API_KEY = '<YOUR_API_KEY>';\n\n  // Array of API discovery doc URLs for APIs used by the quickstart\n  var DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\n\n  // Authorization scopes required by the API; multiple scopes can be\n  // included, separated by spaces.\n  var SCOPES = \"https://www.googleapis.com/auth/calendar.readonly\";\n\n  var authorizeButton = document.getElementById('authorize_button');\n  var signoutButton = document.getElementById('signout_button');\n\n  /**\n   *  On load, called to load the auth2 library and API client library.\n   */\n  function handleClientLoad() {\n    gapi.load('client:auth2', initClient);\n  }\n\n  /**\n   *  Initializes the API client library and sets up sign-in state\n   *  listeners.\n   */\n  function initClient() {\n    gapi.client.init({\n      apiKey: API_KEY,\n      clientId: CLIENT_ID,\n      discoveryDocs: DISCOVERY_DOCS,\n      scope: SCOPES\n    }).then(function () {\n      // Listen for sign-in state changes.\n      gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n      // Handle the initial sign-in state.\n      updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n      authorizeButton.onclick = handleAuthClick;\n      signoutButton.onclick = handleSignoutClick;\n    }, function(error) {\n      appendPre(JSON.stringify(error, null, 2));\n    });\n  }\n\n  /**\n   *  Called when the signed in status changes, to update the UI\n   *  appropriately. After a sign-in, the API is called.\n   */\n  function updateSigninStatus(isSignedIn) {\n    if (isSignedIn) {\n      authorizeButton.style.display = 'none';\n      signoutButton.style.display = 'block';\n      listUpcomingEvents();\n    } else {\n      authorizeButton.style.display = 'block';\n      signoutButton.style.display = 'none';\n    }\n  }\n\n  /**\n   *  Sign in the user upon button click.\n   */\n  function handleAuthClick(event) {\n    gapi.auth2.getAuthInstance().signIn();\n  }\n\n  /**\n   *  Sign out the user upon button click.\n   */\n  function handleSignoutClick(event) {\n    gapi.auth2.getAuthInstance().signOut();\n  }\n\n  /**\n   * Append a pre element to the body containing the given message\n   * as its text node. Used to display the results of the API call.\n   *\n   * @param {string} message Text to be placed in pre element.\n   */\n  function appendPre(message) {\n    var pre = document.getElementById('content');\n    var textContent = document.createTextNode(message + '\\n');\n    pre.appendChild(textContent);\n  }\n\n  /**\n   * Print the summary and start datetime/date of the next ten events in\n   * the authorized user's calendar. If no events are found an\n   * appropriate message is printed.\n   */\n  function listUpcomingEvents() {\n    gapi.client.calendar.events.list({\n      'calendarId': 'primary',\n      'timeMin': (new Date()).toISOString(),\n      'showDeleted': false,\n      'singleEvents': true,\n      'maxResults': 10,\n      'orderBy': 'startTime'\n    }).then(function(response) {\n      var events = response.result.items;\n      appendPre('Upcoming events:');\n\n      if (events.length > 0) {\n        for (i = 0; i < events.length; i++) {\n          var event = events[i];\n          var when = event.start.dateTime;\n          if (!when) {\n            when = event.start.date;\n          }\n          appendPre(event.summary + ' (' + when + ')')\n        }\n      } else {\n        appendPre('No upcoming events found.');\n      }\n    });\n  }\n  return (\n    <Layout>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n    </Layout>\n  );\n}"]},"metadata":{},"sourceType":"module"}